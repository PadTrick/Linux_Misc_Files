Dualboot - EFI - W10 & Archlinux on 1 Disk

Install Windows 10
Shrink the Windows Partition
Boot up Archlinux Iso
Enter >>lsblk<< to list Disks
>>cfdisk /dev/YOURDEVICE<< (for me >>cfdisk /dev/nvme0n1<<)
Create at least 1x Partition of ~600M Type EFI Filesystem and 1x Partition for the actual Archlinux installation.
Format those partitions (those commands are for my own disks, change to your needs)
>>mkfs.vfat -F32 /dev/nvme0n1p5<<
>>mkfs.btrfs /dev/nvme0n1p6<<
after this, start >>archinstall<<
all you need to make sure, is that you setup the mount points during Disk Setup.
your efi partition should be >>/boot<<
your archlinux partition should be >>/<<

After installation, select YES to change the installation, we need to copy some win10 files.
list your disks with >>lsblk<<
create a mountpoint
>>mkdir /mnt/win10>>
>>mount /dev/nvme0n1p1 /mnt/win10<< (change the to your disks)
go into your mountpoint
>>cd /mnt/win10<<
>>cd EFI<<
>>ls<<
copy the Microsoft folder into your /boot
>>cp -r /mnt/win10/EFI/Microsoft /boot/EFI<<

Now you can Exit & Reboot
>>exit<<
>>reboot<<

Dualboot - EFI - W10 & Archlinux on 2 Disks
search your keymap and setup your keymap, for me it will be de_DE-latin1
>>localectl list-keymaps | grep DE<<
>>loadkeys de_DE-latin1<<
install reflector
>>pacman -S reflector<<
run reflector, change country to yours
>>reflector -c Germany -a 6 --sort rate --save /etc/pacman.d/mirrorlist<<
update mirrors
>>pacman -Syyy<<
list your disks to find your windows disk
>>lsblk<<
find your find EFI partition (for me /dev/sda, change to yours)
>>cfdisk /dev/sda<<
create a linux partition on the linux disk (for me /dev/sdb, change to yours)
>>fdisk /dev/sdb<<
in fdisk create a gpt label
just enter >>g<<
now create a new partition
>>n<<
depending on your needs enter your partition parameters
after all is finshed write changes to disk
>>w<<
now format the linux filesystem to your needs (i use btrfs)
>>mkfs.btrfs /dev/sdb1<<
now mount installation partition
>>mount /dev/sdb1 /mnt<<
mount the windows created EFI partition to /mnt/boot, which we need to create first
>>mkdir /mnt/boot<<
>>mount /dev/sda2 /mnt/boot<<
i also want to access windows installation
>>mkdir /mnt/windows<<
>>mount /dev/sda4 /mnt/windows<<
install base packages
>>pacstrap /mnt base linux linux-firmware nano amd-ucode<<
now generate filesystem table
>>genfstab -U /mnt >> /mnt/etc/fstab<<
check your fstab if all is fine
>>cat /mnt/etc/fstab<<
enter installation
>>arch-chroot /mnt<<
now create swapfile
>>fallalocate -l 2GB /swapfile<<
then change permissions
>>chmod 600 /swapfile<<
make and activate the swapfile
>>mkswap /swapfile<<
>>swapon /swapfile<<
add swapfile to fstab
>>nano /etc/fstab<<
at the bottom add the following line
>>/swapfile none swap defaults 0 0<<
CTRL+O to save and CTRL+X to exit nano
setup timezone (for me it the city berlin, change to your need)
>>timedatectl list-timezones | grep Berlin<<
should return "Europe/Berlin" now tell it to the system
>>ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime<<
sync hardware clock to system clock
>>hwclock --systohc<<
now to locales
>>nano /etc/locale.gen<<
select your prefered language, for me its de_DE.UTF8, just remove the "#" at the front
u can select more than 1, after you done your changes CTRL+O to save and CTRL+X to exit nano
now generate the locales
>>locale-gen<<
we also need to work on locale.conf file
>>echo "LANG=de_DE.UTF8" >> /etc/locale.conf<<
also add your keymap to vconsole.conf file
>>echo "KEYMAP=de_DE-latin1" >> /etc/vconsole.conf<<
create your hostname
>>nano /etc/hostname<<
enter any name you want, for me its Gamer
simply enter the name and then CTRL+O to save and CTRL+X to exit nano
also edit the hosts file
>>nano /etc/hosts<<
at the empty bottom add the following lines
>>127.0.0.1	localhost<<
>>::1		localhost<<
>>127.0.1.1	Gamer.localdomain	Gamer<<
after this CTRL+O to save and CTRL+X to exit nano
create root password
>>passwd<<
install grub bootloader and some other packages
>>pacman -S grub efibootmgr networkmanager network-manager-applet wireless_tools wpa_supplicant dialog os-prober mtools dosfstools base-devel linux-headers reflector git bluez bluez-utils pulseaudio-bluetooth cups ntfs-3g openssh<<
>>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB<<
>>grub-mkconfig -o /boot/grub/grub.cfg<<
enabling some services to be used after rebooting
>>systemctl enable NetworkManager<<
>>systemctl enable bluetooth<<
>>systemctl enable org.cups.cupsd<<
>>systemctl enable sshd<<
create new user for system and setup a password(for me its padtrick, change to your needs)
>>useradd -mG wheel padtrick<<
>>passwd padtrick<<
>>EDITOR=nano visudo<<
scroll down and find the lines
"##Uncomment to allow members of group wheel to execute any command"
"# %wheel ALL=(ALL) ALL"
remove the "# " at the beginning, the line should now look like this:
"%wheel ALL=(ALL) ALL"
CTRL+O to save and CTRL+X to exit nano
exit the installation and return to iso-installer
>>exit<<
unmount the partitions
>>umount -a<<
reboot the system
>>reboot<<
boot up archlinux to continue the installation and login with your created username & password.
check that internet is working
>>ip -a<<
if u have a wireless connection use this command to setup your network
>>nmtui<<
install graphics drivers (check archwiki)
#Intel
>>sudo pacman -S xf86-video-intel<<
#AMD
>>sudo pacman -S xf86-video-amdgpu<<
#NVIDIA
>>sudo pacman -S nvidia nvidia-utils<<
installing display server
>>sudo pacman -S xorg<<
install display manager
>>